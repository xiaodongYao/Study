//////////////////////////////////////////////////////////////////////////////
// Timer.cpp
// =======
// High Resolution Timer.
// This timer is able to measure the elapsed time with 1 micro-second accuracy in both Windows, Linux and Unix system 
// 此计时器能够在 Windows、Linux 和 Unix 系统中以 1 微秒的精度测量经过的时间 
//  AUTHOR: Yao xiao dong
// CREATED: 2025-02-12
//
// Copyright (c) 2025 yao xiao dong
//////////////////////////////////////////////////////////////////////////////

//Demo
//LARGE_INTEGER frequency, start, end;
//QueryPerformanceFrequency(&frequency);  // 获取计时器频率
//QueryPerformanceCounter(&start);        // 获取开始时间
//// 执行一些操作
//QueryPerformanceCounter(&end);          // 获取结束时间
//
//// 计算耗时（秒）
//double elapsedTime = (end.QuadPart - start.QuadPart) / (double)frequency.QuadPart;


#include "Timer.h"


//////////////////////////////////////////////////////////////////////////
//constructor
//////////////////////////////////////////////////////////////////////////
Timer::Timer()
{
	QueryPerformanceFrequency(&frequency);
	startCount.QuadPart = 0;
	endCount.QuadPart = 0;

	stopped = 0;
	startTimeInMicroSec = 0;
	endTimeInMicroSec = 0;
}

//////////////////////////////////////////////////////////////////////////
//distuctor
//////////////////////////////////////////////////////////////////////////
Timer::~Timer()
{

}


///////////////////////////////////////////////////////////////////////////////
// start timer.
// startCount will be set at this point.
///////////////////////////////////////////////////////////////////////////////
void Timer::start()
{
	stopped = 0; // reset stop flag
	QueryPerformanceCounter(&startCount);
}

///////////////////////////////////////////////////////////////////////////////
// stop the timer.
// endCount will be set at this point.
///////////////////////////////////////////////////////////////////////////////
void Timer::stop()
{
	stopped = 1; //set timer stopped flag
	QueryPerformanceCounter(&endCount);
}


///////////////////////////////////////////////////////////////////////////////
// compute elapsed time in micro-second resolution. //用微秒计算经过得时间
// other getElapsedTime will call this first, then convert to correspond resolution. //
///////////////////////////////////////////////////////////////////////////////
double Timer::getElapsedTimeInMicroSec()
{
	if (!stopped)
		QueryPerformanceCounter(&endCount);

	startTimeInMicroSec = startCount.QuadPart * (1000000.0 / frequency.QuadPart);
	endTimeInMicroSec = endCount.QuadPart * (1000000.0 / frequency.QuadPart);


	return endTimeInMicroSec - startTimeInMicroSec;
}

///////////////////////////////////////////////////////////////////////////////
// divide elapsedTimeInMicroSec by 1000
///////////////////////////////////////////////////////////////////////////////
double Timer::getElapsedTimeInMilliSec()
{
	return this->getElapsedTimeInMicroSec() * 0.001;
}

///////////////////////////////////////////////////////////////////////////////
// divide elapsedTimeInMicroSec by 1000000
///////////////////////////////////////////////////////////////////////////////
double Timer::getElapsedTimeInSec()
{
	return this->getElapsedTimeInMicroSec() * 0.000001;
}


///////////////////////////////////////////////////////////////////////////////
// same as getElapsedTimeInSec()
///////////////////////////////////////////////////////////////////////////////
double Timer::getElapsedTime()
{
	return this->getElapsedTimeInSec();
}
